# Must create Test Project first - done in project-controller-tests
---
- config:
    - testset: "Coding Scheme Setup for Esquire API Testing"
    - variable_binds: { 'user1': 1, 'jurisdiction1': 1, 'jurisdiction8': 8 }
    
# GET Test Project and extract id
- test:
    - name: "GET 'Test Project' by GET for use in other tests"
    - variable_binds: {projectName: Test%20Project}
    - url: {template: "/api/projects/?name=$projectName"}  
    - method: "GET"
    - headers: {'Content-Type': 'application/json'}   
    - expected_status: [200]
    - extract_binds:
        - 'testProjectId': {'jsonpath_mini': 'id'}

- test:
    - name: "GET 'Test Project' ProjectJurisdictions - should be empty"
    - url: {template: "/api/projects/$testProjectId/jurisdictions"}
    - method: "GET"
    - headers: {'Content-Type': 'application/json'}   
    - expected_status: [200]
    - validators:  # This is how we do more complex testing!
        - compare: {jsonpath_mini: '.', comparator: 'count_eq', expected: 0}
    
- test:
    - name: "attempt to create ProjectJurisdiction for 'Test Project' by POST with invalid user"
    - variable_binds: {userId: 0}
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction1"}
    - method: "POST"
    - headers: {'Content-Type': 'application/json'}
    - body: {template: '{
                    "startDate": "2018-01-30T15:47:33.336Z",
                    "endDate": "2018-01-30T15:47:33.336Z",
                    "userId": "$userId"
                    }'} 
    - expected_status: [401]
    
- test:
    - name: "attempt to create ProjectJurisdiction for 'Test Project' by POST without body"
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction1"}
    - method: "POST"
    - headers: {'Content-Type': 'application/json'}
    - expected_status: [400]
    
- test:
    - name: "attempt to create ProjectJurisdiction for 'Test Project' by POST without startDate"
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction1"}
    - method: "POST"
    - headers: {'Content-Type': 'application/json'}
    - body: {template: '{
                    "endDate": "2018-01-30T15:47:33.336Z",
                    "userId": "$user1"
                    }'} 
    - expected_status: [400]
    
- test:
    - name: "attempt to create ProjectJurisdiction for 'Test Project' by POST without endDate"
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction1"}
    - method: "POST"
    - headers: {'Content-Type': 'application/json'}
    - body: {template: '{
                    "startDate": "2018-01-30T15:47:33.336Z",
                    "userId": "$user1"
                    }'} 
    - expected_status: [400]

- test:
    - name: "attempt to create ProjectJurisdiction for 'Test Project' by POST without userId"
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction1"}
    - method: "POST"
    - headers: {'Content-Type': 'application/json'}
    - body: {template: '{
                    "endDate": "2018-01-30T15:47:33.336Z",
                    "startDate": "2018-01-30T15:47:33.336Z",
                    }'} 
    - expected_status: [401]

- test:
    - name: "attempt to create ProjectJurisdiction for 'Test Project' by POST"
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction1"}
    - method: "POST"
    - headers: {'Content-Type': 'application/json'}
    - body: {template: '{
                    "startDate": "2018-01-30T15:47:33.336",
                    "endDate": "2018-01-30T15:47:33.336",
                    "userId": "$user1"
                    }'} 
    - expected_status: [200]
    - extract_binds:
        - 'project3jurisdiction1Id': {'jsonpath_mini': '.id'}
        - 'project3jurisdiction1Name': {'jsonpath_mini': '.name'}
        - 'project3jurisdiction1StartDate': {'jsonpath_mini': '.startDate'}
        - 'project3jurisdiction1EndDate': {'jsonpath_mini': '.endDate'}
    
- test:
    - name: "GET ALL 'Test Project' ProjectJurisdictions - should contain one item"
    - variable_binds: {projectName: Test Project }
    - url: {template: "/api/projects/$testProjectId/jurisdictions"}
    - method: "GET"
    - headers: {'Content-Type': 'application/json'}   
    - expected_status: [200]
    - validators:  # This is how we do more complex testing!
        - compare: {jsonpath_mini: '.', comparator: 'count_eq', expected: 1}
        
- test:
    - name: "GET 'Test Project' ProjectJurisdictions - should equal values from object extracted from creation"
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction1"}
    - method: "GET"
    - headers: {'Content-Type': 'application/json'}   
    - expected_status: [200]
    - validators:  # This is how we do more complex testing!
        - compare: {jsonpath_mini: '.id', comparator: 'str_eq', expected: {template: "$project3jurisdiction1Id"}} 
        - compare: {jsonpath_mini: '.name', comparator: 'str_eq', expected: {template: "$project3jurisdiction1Name"} } 
        - compare: {jsonpath_mini: '.startDate', comparator: 'str_eq', expected: {template: "$project3jurisdiction1StartDate"} } 
        - compare: {jsonpath_mini: '.endDate', comparator: 'str_eq', expected: {template: "$project3jurisdiction1EndDate"} } 

- test:
    - name: "attempt to create a duplicate ProjectJurisdiction for 'Test Project' by POST"
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction1"}
    - method: "POST"
    - headers: {'Content-Type': 'application/json'}
    - body: {template: '{
                    "startDate": "2018-01-30T15:47:33.336Z",
                    "endDate": "2018-01-30T15:47:33.336Z",
                    "userId": "$user1"
                    }'} 
    - expected_status: [400]
    
- test:
    - name: "GET ALL 'Test Project' ProjectJurisdictions - should contain one item"
    - url: {template: "/api/projects/$testProjectId/jurisdictions"}
    - method: "GET"
    - headers: {'Content-Type': 'application/json'}   
    - expected_status: [200]
    - validators:  # This is how we do more complex testing!
        - compare: {jsonpath_mini: '.', comparator: 'count_eq', expected: 1}
        
- test:
    - name: "attempt to create ProjectJurisdiction for 'Test Project' by POST"
    - url: {template: "/api/projects/$testProjectId/jurisdictions/$jurisdiction8"}
    - method: "POST"
    - headers: {'Content-Type': 'application/json'}
    - body: {template: '{
                    "startDate": "2018-01-30T15:47:33.336Z",
                    "endDate": "2018-01-30T15:47:33.336Z",
                    "userId": "$user1"
                    }'} 
    - expected_status: [200]
    
- test:
    - name: "GET 'Test Project' ProjectJurisdictions - should contain one item"
    - variable_binds: {projectName: Test Project }
    - url: {template: "/api/projects/$testProjectId/jurisdictions"}
    - method: "GET"
    - headers: {'Content-Type': 'application/json'}   
    - expected_status: [200]
    - validators:  # This is how we do more complex testing!
        - compare: {jsonpath_mini: '.', comparator: 'count_eq', expected: 2}

    
    
        

